=begin
#NSX-T Manager API

#VMware NSX-T Manager REST API

OpenAPI spec version: 2.5.1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NSXT
  class ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a Logical Port
    # Deletes the specified logical switch port. By default, if logical port has attachments, or it is added to any NSGroup, the deletion will be failed. Option detach could be used for deleting logical port forcibly. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :detach force delete even if attached or referenced by a group (default to false)
    # @return [nil]
    def delete_logical_port(lport_id, opts = {})
      delete_logical_port_with_http_info(lport_id, opts)
      nil
    end

    # Delete a Logical Port
    # Deletes the specified logical switch port. By default, if logical port has attachments, or it is added to any NSGroup, the deletion will be failed. Option detach could be used for deleting logical port forcibly. 
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :detach force delete even if attached or referenced by a group
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_logical_port_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.delete_logical_port ...'
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.delete_logical_port"
      end
      # resource path
      local_var_path = '/logical-ports/{lport-id}'.sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'detach'] = opts[:'detach'] if !opts[:'detach'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi#delete_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Information About a Logical Port
    # Returns information about a specified logical port.
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @return [LogicalPort]
    def get_logical_port(lport_id, opts = {})
      data, _status_code, _headers = get_logical_port_with_http_info(lport_id, opts)
      data
    end

    # Get Information About a Logical Port
    # Returns information about a specified logical port.
    # @param lport_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalPort, Fixnum, Hash)>] LogicalPort data, response status code and response headers
    def get_logical_port_with_http_info(lport_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.get_logical_port ...'
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.get_logical_port"
      end
      # resource path
      local_var_path = '/logical-ports/{lport-id}'.sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi#get_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a Logical Port
    # Modifies an existing logical switch port. Parameters that can be modified include attachment_type (LOGICALROUTER, VIF), admin_state (UP or DOWN), attachment id and switching_profile_ids. You cannot modify the logical_switch_id. In other words, you cannot move an existing port from one switch to another switch. 
    # @param lport_id 
    # @param logical_port 
    # @param [Hash] opts the optional parameters
    # @return [LogicalPort]
    def update_logical_port(lport_id, logical_port, opts = {})
      data, _status_code, _headers = update_logical_port_with_http_info(lport_id, logical_port, opts)
      data
    end

    # Update a Logical Port
    # Modifies an existing logical switch port. Parameters that can be modified include attachment_type (LOGICALROUTER, VIF), admin_state (UP or DOWN), attachment id and switching_profile_ids. You cannot modify the logical_switch_id. In other words, you cannot move an existing port from one switch to another switch. 
    # @param lport_id 
    # @param logical_port 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogicalPort, Fixnum, Hash)>] LogicalPort data, response status code and response headers
    def update_logical_port_with_http_info(lport_id, logical_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.update_logical_port ...'
      end
      # verify the required parameter 'lport_id' is set
      if @api_client.config.client_side_validation && lport_id.nil?
        fail ArgumentError, "Missing the required parameter 'lport_id' when calling ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.update_logical_port"
      end
      # verify the required parameter 'logical_port' is set
      if @api_client.config.client_side_validation && logical_port.nil?
        fail ArgumentError, "Missing the required parameter 'logical_port' when calling ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi.update_logical_port"
      end
      # resource path
      local_var_path = '/logical-ports/{lport-id}'.sub('{' + 'lport-id' + '}', lport_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(logical_port)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogicalPort')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ManagementPlaneApiLogicalSwitchingLogicalSwitchPortsApi#update_logical_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
